import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        //classpath 'gradle.plugin.net.minecrell:licenser:0.4.1'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    //apply plugin: 'net.minecrell.licenser'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    dependencies {
        implementation 'org.jetbrains:annotations:20.1.0'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    group = project.pluginGroup
    version = project.pluginVersion

    sourceCompatibility = 11
    targetCompatibility = 11

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from(sourceSets.main.resources.srcDirs) {
            filter ReplaceTokens, tokens: [version: version]
        }
    }

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    build.dependsOn(shadowJar)

    shadowJar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        dependencies {
            include(dependency(':debuggery-common'))
        }

        setArchiveClassifier(null)
        from rootProject.file("LICENSE.md")
    }

    test {
        testLogging.showStandardStreams = true
        useJUnitPlatform()
    }

    // updateLicenses | checkLicenses
    /*license {
        ext.name = 'Debuggery'
        header = rootProject.file('HEADER.txt')
    }*/
}
